// TCSS 305 - Spring 2016

package gui;

import filters.EdgeDetectFilter;
import filters.EdgeHighlightFilter;
import filters.FlipHorizontalFilter;
import filters.FlipVerticalFilter;
import filters.GrayscaleFilter;
import filters.SharpenFilter;
import filters.SoftenFilter;
import image.PixelImage;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;



/**
 * 
 * @author concox
 * @version 1.0
 */
public class SnapShopGUI {
    /**
     * 
     */
    private final JFileChooser myChooser = new JFileChooser();
    /**
     * 
     */
    private PixelImage myImage;
    /**
     * 
     */
    private final JLabel myPictureLabel = new JLabel();
    /**
     * 
     */
    private final JFrame myFrame = new JFrame("Snapshot");
    /**
     * 
     */
    private boolean myIsOpen;
    /**
     * Creates an array list to populate the GUI. 
     * 
     * @return returns list of all the buttons that user wants to display
     */
    private List<String> availableButtons() { 
        final ArrayList<String> buttonList = new ArrayList<>();
        //Add button names here.
        buttonList.add("Edge Detect");
        buttonList.add("Edge Highlight");
        buttonList.add("Flip Horizontal");
        buttonList.add("Flip Vertical");
        buttonList.add(new GrayscaleFilter().getDescription());
        buttonList.add(new SoftenFilter().getDescription());
        buttonList.add(new SharpenFilter().getDescription());
        return buttonList;
    }
    /**
     * 
     */
    public void start() {
        final JPanel westPanel = new JPanel();
        final JPanel southPanel = new JPanel();   
        
        westPanel.setLayout(new GridLayout(availableButtons().size(), 1));
        for (final String str : availableButtons()) {
            westPanel.add(createButton(str));
        }
        southPanel.add(createOpenButton());
        southPanel.add(createSaveButton());
        southPanel.add(createClearButton());
        
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.setLocationRelativeTo(null);
        myFrame.add(westPanel, BorderLayout.WEST);
        myFrame.add(southPanel, BorderLayout.SOUTH);
        myFrame.pack();
        myFrame.setVisible(true);
    }
    /**
     * @return return the open button.
     */
    private JButton createSaveButton() {
        final JButton button = new JButton("Save File...");
        button.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent theEvent) {
                fileSaverHandler();
            }
        });
        return button;
    }
    /**
     * 
     */
    private void fileSaverHandler() {
        final int returnVal = myChooser.showSaveDialog(myChooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File saveThisFile = myChooser.getSelectedFile();
            try {
                final String fileName = saveThisFile.getCanonicalPath();
                saveThisFile = new File(fileName);
                myImage.save(saveThisFile);
                
            } catch (final IOException e) {
                JOptionPane.showMessageDialog(myChooser, "Something went wrong!");
            }
        }
    }
    /**
     * @return return the open button.
     */
    private JButton createOpenButton() {
        final JButton button = new JButton("Open...");
        button.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent theEvent) {
                fileChooserHandler();
            }
        });
        return button;
    }
    /**
     * 
     */
    private void fileChooserHandler() {
        final int returnVal = myChooser.showOpenDialog(myChooser);
        final File workingDir = new File(System.getProperty("user.dir"));
        myChooser.setCurrentDirectory(workingDir);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (myChooser.getSelectedFile().getName().toLowerCase().endsWith(".gif")
                      || myChooser.getSelectedFile().getName().toLowerCase().endsWith(".png") 
                      || myChooser.getSelectedFile().getName().toLowerCase().endsWith("jpg")) {
                try {
                    myImage = PixelImage.load(myChooser.getSelectedFile());
                    myPictureLabel.setIcon(new ImageIcon(myImage));
                    myFrame.add(myPictureLabel);
                    myIsOpen = true;
                    myFrame.pack();
                } catch (final IOException e) {
                    System.out.println("life is good");
                }
            } else {
                JOptionPane.showMessageDialog(myChooser, "Please select an image!",
                                              "Select image", JOptionPane.ERROR_MESSAGE);
            }
        } 
    }
    /**
     * @return return the open button.
     */
    private JButton createClearButton() {
        final JButton button = new JButton("Close Image");
        button.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent theEvent) {
                if (myIsOpen) {
                    myFrame.remove(myPictureLabel);
                    myFrame.pack();
                    myIsOpen = false;
                }
            }
        });
        return button;
    }
    /**
     * @param theString buttonPassed in
     * @return returns the button
     */
    private JButton createButton(final String theString) {
        final JButton button = new JButton(theString);
        /**
         *
         */
        class AnActionListener implements ActionListener { 
            /**
             * @param theEvent no.
             */
            public void actionPerformed(final ActionEvent theEvent) {
                final String noSpace = button.getText().replaceAll("\\s+", "");
                switch (noSpace) {
                    case "EdgeDetect": new EdgeDetectFilter().filter(myImage);
                        myPictureLabel.setIcon(new ImageIcon(myImage));
                        myFrame.add(myPictureLabel);
                    break;
                    case "EdgeHighlight": new EdgeHighlightFilter().filter(myImage);
                        myPictureLabel.setIcon(new ImageIcon(myImage));
                        myFrame.add(myPictureLabel);
                    break;
                    case "FlipHorizontal": new FlipHorizontalFilter().filter(myImage);
                        myPictureLabel.setIcon(new ImageIcon(myImage));
                        myFrame.add(myPictureLabel);
                    break;
                    case "FlipVertical": new FlipVerticalFilter().filter(myImage);
                        myPictureLabel.setIcon(new ImageIcon(myImage));
                        myFrame.add(myPictureLabel);
                    break;
                    case "Grayscale": new GrayscaleFilter().filter(myImage);
                        myPictureLabel.setIcon(new ImageIcon(myImage));
                        myFrame.add(myPictureLabel);
                    break;
                    case "Sharpen": new SharpenFilter().filter(myImage);
                        myPictureLabel.setIcon(new ImageIcon(myImage));
                        myFrame.add(myPictureLabel);
                    break;
                    case "Soften": new SoftenFilter().filter(myImage);
                        myPictureLabel.setIcon(new ImageIcon(myImage));
                        myFrame.add(myPictureLabel);
                    break;
                    default: break;
                }
            }
        }
        button.addActionListener(new AnActionListener());
        return button;
    }
    
}